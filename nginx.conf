



server {
    listen      80;
    listen [::]:80;
   

    server_name  example.com www.example.com ;

    
    # SSL here 
    # Note that ssl.conf will NOT be included, only a symlink ssl.enabled.
    # The reason is that nginx will not start if we specify cert files that do not exist.
    # Creating a symlink and sending a reload signal to nginx is an elegant workaround to this problem. 
    include /etc/nginx/include_ssl/*.enabled ;


    location / {
        root   /usr/share/nginx/html/;
        index  index.html index.htm;
    }

    location /.well-known/acme-challenge {
       
        # The target IP address is the IP address of the host.
        # To get that IP address, execute from inside of nginx container:
        #     ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+'
        # Port 5000 is the exposed port 80 of the certbot container.
        # Note that a static IP address has to be used here to proxy_pass to certbot. Nginx is not able to dynamically resolve 
        #  container name "certbot" inside of a docker network. (not clear to me why)

        set $target http://172.17.0.1:5000 ; 
        proxy_pass $target;
        proxy_set_header Host            $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto https;
    }


    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html/;
    }

   
}


